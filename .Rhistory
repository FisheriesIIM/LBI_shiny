validate(
need(input$linf_value, "Enter Linf"),
need(input$lmat_value, "Enter Lmat")
)
lb_plot(data = dat,
binwidth = input$binwidth_value,
l_units = input$length_units,
linf = input$linf_value,
lmat = input$lmat_value,
weight = NULL)
},
width = 1000,
height = 600)
output$lb_indicator_table <- renderFlexTable({
validate(
need(input$input_type, "")
)
if(input$input_type == "input_file"){
validate(
need(input$choose_input_data, "Load a file to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
) <- data_from_user()
}
if(input$input_type == "example_file"){
validate(
need(input$choose_example_data, "Select the example data to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
)
dat <- data_example()
}
validate(
need(input$linf_value, "Enter Linf"),
need(input$lmat_value, "Enter Lmat")
)
lb_table(data = dat,
binwidth = input$binwidth_value,
l_units = input$length_units,
linf = input$linf_value,
lmat = input$lmat_value,
weight = NULL)
})
}
# download_data
# download_doc
# download_histogram
# download_lb_plot
# stock_name
#
output$download_doc <- downloadHandler(
filename = function() {
paste0(input$stock_name, ".docx")
# nm <- input$stock_name
# nm <- gsub(" ", "", nm)
# if (nchar(nm) < 1) nm <- "stock_name"
# paste0(nm, '_LBI_summary.docx')
},
content = function(file) {
validate(
need(input$input_type, "")
)
if(input$input_type == "input_file"){
validate(
need(input$choose_input_data, "Load a file to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
) <- data_from_user()
}
if(input$input_type == "example_file"){
validate(
need(input$choose_example_data, "Select the example data to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
)
dat <- data_example()
}
validate(
need(input$linf_value, "Enter Linf"),
need(input$lmat_value, "Enter Lmat")
)
lb_doc(data = dat,
binwidth = input$binwidth_value,
l_units = input$length_units,
linf = input$linf_value,
lmat = input$lmat_value,
stock = input$stock_name,
weight = NULL,
weight_data = NULL,
filename = file)
}
)
#
# Return a Shiny app object
shinyApp(ui = ui, server = server)
runApp('~/git/shinyproxyapps/LBIndicator_shiny')
rm(list = ls())
library(LBSPR)
library(shiny)
library(reshape2)
library(ReporteRs)
source("utilities.R")
# Define the UI
ui <- tagList(
tags$style(HTML("div#lb_indicator_plot img {width: auto; height: auto; max-width: auto; max-height: 800px;}")),
navbarPage(title = "LBIndicator Application",
id = "navbar",
tabPanel("Instructions"
# ADD INSTRUCTIONS HERE
#
#
#
), #tabPanel
tabPanel(title = "Upload data",
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "input_type",
label = "How do you want to upload data?",
list("I have a length frequency distribution I want to explore." = "input_file",
"I want to look at sample data" = "example_file"),
selected = ""),
conditionalPanel(
condition = "input.input_type == 'input_file'",
fileInput(inputId = 'choose_input_data',
label = "Choose file to upload",
accept = c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)
), #fileInput
radioButtons(inputId = 'separator_button',
label = 'Separator',
selected = ",",
choices =  c(
Comma = ',',
Semicolon = ';',
Tab = '\t')
), #radioButtons
actionButton(inputId = "load_input_data",
label = "Load Data",
icon("cloud-upload")
) #fileInput
), #conditionalPanel
conditionalPanel(
condition = "input.input_type == 'example_file'",
selectInput(inputId = 'choose_example_data',
label = "Example Data",
choices = c(
"",
"Frequency - Nephrops" = "freqNeph",
"Frequency - Anglerfish" = "freqAngler")
) #selectInput
) #ConditionalPanel
), #sidebarPanel
mainPanel(
h3("Length frequency distribution"),
h4("Steps:"),
tags$ol(
tags$li("Upload a CSV data file or select an example data set from the menu on the left."),
tags$li("Length frequency distributions should have the length bin in the first column and annual frequency in subsequent columns."),
tags$li("Double check the first 6 rows to make sure everything looks OK.")
),
dataTableOutput("data_table")
) # mainPanel
) # sidebar layout
), #tabPanel
tabPanel(title = "Plot length frequency data",
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "binwidth_value",
label = "Bin width for length frequencies",
min = 1,
max = 100,
value = ""
), #sliderInput
radioButtons(inputId = 'length_units',
label = "",
selected = ",",
choices =  c(
"cm" = 'cm',
"mm" = 'mm',
"in" = 'in')
) #radioButtons
), #sidebarPanel
mainPanel(
h3("Plots go here"),
h4("Steps:"),
tags$ol(
tags$li("Select the optimal bin width for length frequencies and the proper units. Note: units are only used for plot labels."),
tags$li("If the length frequencies displayed are not correct, please review the raw data")
),
# Reactive length frequencies
plotOutput("histogram_plot")
) # mainPanel
) # sidebar layout
), #tabPanel
tabPanel(title = "Length based indicator - plots",
sidebarLayout(
sidebarPanel(
# Input Linf and Lmat parameters
tags$div(
HTML("L<sub>&#x221e</sub>")
),
numericInput(inputId = 'linf_value',
label = "",
value = "",
min = 1,
max = 100
), # textInput
tags$div(
HTML("L<sub>mat</sub>")
),
numericInput(inputId = 'lmat_value',
label = "",
value = "",
min = 1,
max = 100
) # textInput
), #sidebarPanel
mainPanel(
h3("Plots go here"),
h4("Steps:"),
tags$ol(
tags$li("Fill in the name of your stock if you want to download summary "),
tags$li("If the length frequencies displayed are not correct, please review the raw data")
),
# Reactive table
plotOutput("lb_indicator_plot")
) # mainPanel
) # sidebar layout
), #tabPanel
tabPanel(title = "Length based indicator - table",
sidebarLayout(
sidebarPanel(
), #sidebarPanel
mainPanel(
h3("Download "),
h4("Steps:"),
tableOutput(outputId = "lb_indicator_table")
# dataTableOutput("lb_indicator_data"),
# Download histograms
# Download LBI plots
# Download LFD data
# Download as .docx
# References and help where to get help.
) # mainPanel
) # sidebar layout
), #tabPanel
tabPanel("Downloads",
h3("Multiple downloads to choose from:"),
# tags$ol(
#   tags$li("Fill in the name of your stock if you want to download summary "),
#   tags$li("")
# ),
h4("Binned Data"),
downloadButton('download_data',
'Download binned data (.csv)'
), # downloadButton
br(),
h4("Plots"),
downloadButton('download_doc',
'Download summary document (.docx)'
), # downloadButton
downloadButton('download_histogram',
'Download histogram (.png)'
), # downloadButton
br(),
h4("Summary sheet"),
downloadButton('download_lb_plot',
'Download indicator time series plots (.png)'
), # downloadButton
textInput(inputId = 'stock_name',
label = "Enter stock name as filename (optional)",
placeholder = "My stock"
) # textInput
) #tabPanel
) # NavbarPage
) #tagList
server <- function(input, output, session) {
# LOAD YOUR OWN DATA
data_from_user <- reactive({
req(input$input_type,
input$choose_input_data,
input$load_input_data
)
datapath <- input$choose_input_data$datapath
dat <- read.csv(file = datapath,
header = TRUE,
sep = input$separator_button,
stringsAsFactors = FALSE,
check.names = FALSE)
if(class(dat) == "data.frame" | class(dat) == "matrix") {
if(ncol(dat) > 1) {
chk_NAs <- apply(dat, 2, is.na) # check NAs
dat <- dat[!apply(chk_NAs, 1, prod), , drop = FALSE]
dat <- dat[, !apply(chk_NAs, 2, prod), drop = FALSE]
}
}
if(class(dat) == "numeric" | class(dat) == "integer") {
dat <- dat[!is.na(dat)]
}
return(dat)
})
data_example <- reactive({
req(
input$input_type,
# input$input_file,
input$choose_example_data
)
read.csv(switch(input$choose_example_data,
freqNeph = "data/freqNeph.csv",
freqAngler = "data/freqAngler.csv"),
header = TRUE,
stringsAsFactors = FALSE,
check.names = FALSE)
})
output$data_table <- renderDataTable({
# Print out first 6 observations
validate(
need(input$input_type, "")
)
if(input$input_type == "input_file"){
validate(
need(input$choose_input_data, "Load a file to explore")
)
dat <- data_from_user()
}
if(input$input_type == "example_file"){
validate(
need(input$choose_example_data, "Select the example data to explore")
)
dat <- data_example()
}
head(dat)
}, options = list(pageLength = -1,
searching = FALSE,
paging = FALSE,
ordering = FALSE,
info = FALSE)
)
output$histogram_plot <- renderPlot({
validate(
need(input$input_type, "")
)
if(input$input_type == "input_file"){
validate(
need(input$choose_input_data, "Load a file to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
)
dat <- data_from_user()
}
if(input$input_type == "example_file"){
validate(
need(input$choose_example_data, "Select the example data to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
)
dat <- data_example()
}
bin_plot(dat,
binwidth = input$binwidth_value,
l_units = input$length_units)
})
output$lb_indicator_data <- renderDataTable({
validate(
need(input$input_type, "")
)
if(input$input_type == "input_file"){
validate(
need(input$choose_input_data, "Load a file to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
) <- data_from_user()
}
if(input$input_type == "example_file"){
validate(
need(input$choose_example_data, "Select the example data to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
)
dat <- data_example()
}
validate(
need(input$linf_value, "Enter Linf"),
need(input$lmat_value, "Enter Lmat")
)
lb_dat <- lb_table(data = dat,
binwidth = input$binwidth_value,
linf = input$linf_value,
lmat = input$lmat_value,
weight = NULL)
})
output$lb_indicator_plot <- renderPlot({
validate(
need(input$input_type, "")
)
if(input$input_type == "input_file"){
validate(
need(input$choose_input_data, "Load a file to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
) <- data_from_user()
}
if(input$input_type == "example_file"){
validate(
need(input$choose_example_data, "Select the example data to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
)
dat <- data_example()
}
validate(
need(input$linf_value, "Enter Linf"),
need(input$lmat_value, "Enter Lmat")
)
lb_plot(data = dat,
binwidth = input$binwidth_value,
l_units = input$length_units,
linf = input$linf_value,
lmat = input$lmat_value,
weight = NULL)
},
width = 1000,
height = 600)
output$lb_indicator_table <- renderFlexTable({
validate(
need(input$input_type, "")
)
if(input$input_type == "input_file"){
validate(
need(input$choose_input_data, "Load a file to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
) <- data_from_user()
}
if(input$input_type == "example_file"){
validate(
need(input$choose_example_data, "Select the example data to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
)
dat <- data_example()
}
validate(
need(input$linf_value, "Enter Linf"),
need(input$lmat_value, "Enter Lmat")
)
lb_table(data = dat,
binwidth = input$binwidth_value,
l_units = input$length_units,
linf = input$linf_value,
lmat = input$lmat_value,
weight = NULL)
})
# }
# download_data
# download_doc
# download_histogram
# download_lb_plot
# stock_name
#
output$download_doc <- downloadHandler(
filename = function() {
paste0(input$stock_name, ".docx")
# nm <- input$stock_name
# nm <- gsub(" ", "", nm)
# if (nchar(nm) < 1) nm <- "stock_name"
# paste0(nm, '_LBI_summary.docx')
},
content = function(file) {
validate(
need(input$input_type, "")
)
if(input$input_type == "input_file"){
validate(
need(input$choose_input_data, "Load a file to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
) <- data_from_user()
}
if(input$input_type == "example_file"){
validate(
need(input$choose_example_data, "Select the example data to explore"),
need(input$binwidth_value, "Select the binwidth for the histograms"),
need(input$length_units, "Select the proper units.")
)
dat <- data_example()
}
validate(
need(input$linf_value, "Enter Linf"),
need(input$lmat_value, "Enter Lmat")
)
lb_doc(data = dat,
binwidth = input$binwidth_value,
l_units = input$length_units,
linf = input$linf_value,
lmat = input$lmat_value,
stock = input$stock_name,
weight = NULL,
weight_data = NULL,
filename = file)
})
}
#
# Return a Shiny app object
shinyApp(ui = ui, server = server)
runApp('~/git/shinyproxyapps/LBIndicator_shiny')
